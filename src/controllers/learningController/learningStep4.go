package learningController

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	v "github.com/spf13/viper"
	"project0/src/actions/mapsActions"
	"project0/src/models"
	"project0/src/repositories"
	"strings"
)

func learningStep4(data string, user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	if len(data) == 0 {
		return
	}
	charData := strings.Fields(data)
	sep := v.GetString("msg_separator")

	errorInfo := "‚ùó –°–Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω–∞–¥–æ \"–ù–∞–¥–µ—Ç—å ‚úÖ\" –≤—Å–µ –≤–µ—â–∏ –Ω–∞ —Å–µ–±—è!"
	errorInfo2 := "‚ùó –ü–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–¥–æ *—É–Ω–∏—á—Ç–æ–∂–∞—Ç—å üí• –ø—Ä–µ–¥–º–µ—Ç—ã*!\n–û–Ω–∏ —Ç–µ–±–µ –µ—â–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è!"
	errorInfo3 := "‚ùó –ü–æ–∫–∞ —á—Ç–æ –Ω–µ –Ω–∞–¥–æ *–≤—ã–∫–∏–¥—ã–≤–∞—Ç—å üóë –ø—Ä–µ–¥–º–µ—Ç—ã*!\n–û–Ω–∏ —Ç–µ–±–µ –µ—â–µ –ø—Ä–∏–≥–æ–¥—è—Ç—Å—è!"
	info := "*–®–∞–≥ 4:*\n–≠—Ç–æ —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –≤–µ—â–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å!\n" +
		"–ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç—Ä–µ–ª–æ—á–∫–∏ üî∫üîª, —á—Ç–æ–±—ã –ø–µ—Ä–µ–º–µ—â–∞—Ç—å—Å—è –ø–æ —Å–ø–∏—Å–∫—É –≤–µ—â–µ–π!\n\n" +
		"- –ß—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–∂–º–∏ —Å–∞–º—É—é –≤–µ—Ä—Ö–Ω—é—é –∫–Ω–æ–ø–∫—É ¬´–ò–Ω—Ñ–æ‚Ä¶¬ª\n" +
		"- –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –µ–≥–æ –Ω–∞–¥–æ –Ω–∞–¥–µ—Ç—å (–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É ¬´–ù–∞–¥–µ—Ç—å ‚úÖ¬ª\n" +
		"- –ß—Ç–æ–±—ã —Å–∫–∏–Ω—É—Ç—å –ø—Ä–µ–¥–º–µ—Ç –Ω–∞ –∫–∞—Ä—Ç—É, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å üëãüóëüó∫\n" +
		"- –ß—Ç–æ–±—ã —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç, –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å üí•üóëüí•\n" +
		"- –¶–∏—Ñ—Ä—ã —Å–ø—Ä–∞–≤–∞ –æ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è (30/30) –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç, —Å–∫–æ–ª—å–∫–æ —Ä–∞–∑ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç\n\n" +
		"‚ùóÔ∏è–ü—Ä–æ—á–∏—Ç–∞–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–∞—Ö, –Ω–∞–¥–µ–Ω—å –∏—Ö, –∏ –ø–æ–ø—Ä–æ–±—É–π –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å, –ø–æ–¥–æ–π–¥—è –∫ –¥—Ä—É–≥–∏–º –ø—Ä–µ–¥–º–µ—Ç–∞–º –Ω–∞ –∫–∞—Ä—Ç–µ"
	infoNextStep := "–ò—Å–ø–æ–ª—å–∑—É–π –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã, —á—Ç–æ–± —Å–æ–±—Ä–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∏ —Ä–∞—Å—á–∏—Å—Ç–∏—Ç—å —Å–µ–±–µ –ø—É—Ç—å –¥–ª—è –¥–≤–µ—Ä–∏:\n" +
		"\U0001FA93 - —Ç–æ–ø–æ—Ä –¥–ª—è –¥–µ—Ä–µ–≤—å–µ–≤\n" +
		"‚õè - –∫–∏—Ä–∫–∞ –¥–ª—è –∫–∞–º–Ω–µ–π\n" +
		"üé© - —à–ª—è–ø–∞, —á—Ç–æ–± –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–µ–¥–º–µ—Ç–µ\n\n" +
		"–î–æ–±—ã—Ç—ã–µ —Ä–µ—Å—É—Ä—Å—ã –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ —Ä—é–∫–∑–∞–∫–µ"

	switch true {
	case strings.Contains(data, "cancel"):
		if userDressedAllItems(user) {
			text, buttons = mapsActions.MapsActions(user, data)
			text = fmt.Sprintf("%s%s%s", infoNextStep, sep, text)

			user.MenuLocation = "learning step5"
			repositories.UpdateUser(user)
		} else {
			text, buttons = mapsActions.MapsActions(user, "goodsMoving")
			text = fmt.Sprintf("%s%s%s%s%s", info, sep, text, sep, errorInfo)
		}
	case strings.Contains(data, "deleteItem"):
		text, buttons = mapsActions.MapsActions(user, fmt.Sprintf("goodsMoving %s", charData[2]))
		text = fmt.Sprintf("%s%s%s%s%s", info, sep, text, sep, errorInfo2)
	case strings.Contains(data, "countOfThrowOut"):
		text, buttons = mapsActions.MapsActions(user, fmt.Sprintf("goodsMoving %s", charData[2]))
		text = fmt.Sprintf("%s%s%s%s%s", info, sep, text, sep, errorInfo3)
	default:
		text, buttons = mapsActions.MapsActions(user, data)
		text = fmt.Sprintf("%s%s%s", info, sep, text)
	}

	return text, buttons
}

func userDressedAllItems(user models.User) bool {
	if user.LeftHandId != nil && user.RightHandId != nil && user.HeadId != nil {
		return true
	}
	return false
}
