package learningController

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	v "github.com/spf13/viper"
	"project0/src/controllers/mapController"
	"project0/src/models"
	"project0/src/repositories"
	"project0/src/services/menu"
	"strings"
)

func Learning(update tg.Update, user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	if update.CallbackQuery == nil && user.MenuLocation == "learning" {
		return greetingUser(user)
	}

	if update.CallbackQuery == nil {
		return
	}
	data := update.CallbackQuery.Data

	switch true {
	case strings.Contains(user.MenuLocation, "step1"):
		text, buttons = learningStep1(data, user)
	case strings.Contains(user.MenuLocation, "step2"):
		text, buttons = learningStep2(data, user)
	case strings.Contains(user.MenuLocation, "step3"):
		text, buttons = learningStep3(data, user)
	case strings.Contains(user.MenuLocation, "step4"):
		text, buttons = learningStep4(data, user)
	case strings.Contains(user.MenuLocation, "step5"):
		text, buttons = learningStep5(data, user)
	case strings.Contains(user.MenuLocation, "step6"):
		text, buttons = learningStep6(data, user)
	default:
		if len(data) != 0 {
			text, buttons = startUserAction(data, user)
		} else {
			text, buttons = greetingUser(user)
		}
	}

	return text, buttons
}

func greetingUser(user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	text = fmt.Sprintf("–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, *%s %s*! ü§ù\n"+
		"–ó–¥–µ—Å—å —è –Ω–∞—É—á—É —Ç–µ–±—è –æ—Å–Ω–æ–≤–∞–º, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å—Å—è –≤ –∫–Ω–æ–ø–∫–∞—Ö –∏–≥—Ä—ã!\n\n"+
		"%s - —ç—Ç–æ —Ç—ã!\n\n"+
		"–¢—ã –º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å —Å–µ–±–µ *–Ω–æ–≤—ã–π –∞–≤–∞—Ç–∞—Ä* –∏–ª–∏ –≤—ã–±—Ä–∞—Ç—å –ø–æ—Ç–æ–º –≤ *–ú–µ–Ω—é > –ü—Ä–æ—Ñ–∏–ª—å*", user.FirstName, user.LastName, user.Avatar)
	buttons = startLearningButton()

	return text, buttons
}

func startLearningButton() tg.InlineKeyboardMarkup {
	return tg.NewInlineKeyboardMarkup(
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData("–í—ã–±—Ä–∞—Ç—å –∞–≤–∞—Ç–∞—Ä", "chooseAvatar"),
		),
		tg.NewInlineKeyboardRow(
			tg.NewInlineKeyboardButtonData("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", "step1"),
		),
	)
}

func startUserAction(data string, user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	charData := strings.Fields(data)

	switch true {
	case strings.Contains(data, "chooseAvatar"):
		text = "‚ÄºÔ∏è *–í–ù–ò–ú–ê–ù–ò–ï*: ‚ÄºÔ∏è‚Äº\n–í—ã–±–µ—Ä–∏ —Å–µ–±–µ –∞–≤–∞—Ç–∞—Ä..."
		buttons = menu.EmojiInlineKeyboard()
	case strings.Contains(data, v.GetString("callback_char.change_avatar")):
		res := repositories.UpdateUser(models.User{TgId: user.TgId, Avatar: charData[1]})
		text, buttons = greetingUser(res)
	case strings.Contains(data, "step1"):
		user.MenuLocation = "learning step1"
		repositories.UpdateUser(user)

		text, buttons = mapController.GetMyMap(user)
		text = fmt.Sprintf("–≠—Ç–æ –ø–µ—Ä–≤–∞—è –∫–∞—Ä—Ç–∞, –∫–æ—Ç–æ—Ä—É—é —è —Å–æ–∑–¥–∞–ª, –∫–æ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–ª –ø–∏—Å–∞—Ç—å –∏–≥—Ä—É!\n\n"+
			"%s - —ç—Ç–æ —Ç—ã!\n\n"+
			"*–®–∞–≥ 1:*\n–í–∏–¥–∏—à—å —Å–Ω–∏–∑—É –∫–Ω–æ–ø–∫–∏-—Å—Ç—Ä–µ–ª–æ—á–∫–∏ (‚óÄÔ∏è üîº ‚ñ∂Ô∏è üîΩ)? –û–Ω–∏ –ø–æ–∑–≤–æ–ª—è—é—Ç —Ç–µ–±–µ —Ö–æ–¥–∏—Ç—å!\n"+
			"–ü–æ–ø—Ä–æ–±—É–π –ø—Ä–æ–π—Ç–∏—Å—å –ø–æ –∫–∞—Ä—Ç–µ, –∞ –∫–∞–∫ –æ—Å–≤–æ–∏—à—å—Å—è, –±–µ—Ä–∏ –∫–≤–µ—Å—Ç \U0001FAA7 –Ω–∞ –æ–±—É—á–µ–Ω–∏–µ –∏ –∑–∞—Ö–æ–¥–∏ –≤ –¥–≤–µ—Ä—å üö™%s%s", user.Avatar, v.GetString("msg_separator"), text)
	}

	return text, buttons
}
