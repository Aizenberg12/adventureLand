package learningController

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	v "github.com/spf13/viper"
	"project0/src/actions/mapsActions"
	"project0/src/controllers/boxController"
	"project0/src/controllers/mapController"
	"project0/src/models"
	"project0/src/repositories"
	"project0/src/services/helpers"
	"strings"
)

func learningStep2(data string, user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	charData := strings.Fields(data)

	info1 := "*–®–∞–≥ 2:*\n–ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã!\n–ò—Å—Å–ª–µ–¥—É–π –º–µ—Å—Ç–Ω–æ—Å—Ç—å, –Ω–µ –±–æ–π—Å—è –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –ø–æ–¥–∞—Ä–æ—á–∫–∏ üéÅ —Å–≤–µ—Ä—Ö—É, —Ç–∞–º —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!"
	info2 := "–û—Ç–ª–∏—á–Ω–æ!\n–í–æ–∑—å–º–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ, –∏ —è –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å!"
	infoNextStep := "*–®–∞–≥ 3:*\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–í–µ—â–∏ üß¶¬ª"

	switch true {
	case strings.Contains(data, "goodsMoving"),
		strings.Contains(data, "–ú–µ–Ω—é"),
		strings.Contains(data, "category"):

		text, buttons = mapController.GetMyMap(user)

		if strings.Contains(user.MenuLocation, "step2.1") {
			text = fmt.Sprintf("%s%s%s%s‚ùóÔ∏è –ü–æ–∫–∞ –µ—â–µ —Ä–∞–Ω–æ —ç—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å ü§´", info2, v.GetString("msg_separator"), text, v.GetString("msg_separator"))
		} else if strings.Contains(user.MenuLocation, "step2") {
			text = fmt.Sprintf("%s%s%s%s‚ùóÔ∏è –ü–æ–∫–∞ –µ—â–µ —Ä–∞–Ω–æ —ç—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å ü§´", info1, v.GetString("msg_separator"), text, v.GetString("msg_separator"))
		}

	case strings.Contains(data, "move 44209"):
		text, buttons = mapController.GetMyMap(user)
		text = fmt.Sprintf("%s%s%s%s‚ùóÔ∏è –î–ª—è –Ω–∞—á–∞–ª–∞ —Ç–µ–±–µ –Ω–∞–¥–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ! ", info2, v.GetString("msg_separator"), text, v.GetString("msg_separator"))

	case strings.Contains(data, "box"):
		cell := models.Cell{ID: uint(helpers.ToInt(charData[1]))}.GetCell()
		text, buttons = boxController.UserGetBox(user, cell)
		if strings.Contains(data, "box 44210") {
			text = fmt.Sprintf("%s\n\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –Ω–∞—à–µ–ª —Ñ—Ä—É–∫—Ç! \n"+
				"üçé –Ø–±–ª–æ–∫–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–≤–æ–∏ –∂–∏–∑–Ω–∏ ‚ô•Ô∏è –∏ —Å—ã—Ç–æ—Å—Ç—å \U0001F9C3\n"+
				"–¢–µ–ø–µ—Ä—å –æ–Ω–æ –ª–µ–∂–∏—Ç –≤ —Ç–≤–æ–µ–º –†—é–∫–∑–∞–∫–µ üéí\n\n"+
				"_(–Ω–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å —Ç—É–¥–∞ –ø–æ—Å–ª–µ –æ–±—É—á–µ–Ω–∏—è)_ ", text)
			return text, buttons
		}

		if strings.Contains(user.MenuLocation, "step2.1") {
			text = fmt.Sprintf("%s%s%s", infoNextStep, v.GetString("msg_separator"), text)
			user.MenuLocation = "learning step3"
			repositories.UpdateUser(user)
		} else if strings.Contains(user.MenuLocation, "step2") {
			text = fmt.Sprintf("%s%s%s", info2, v.GetString("msg_separator"), text)
			user.MenuLocation = "learning step2.1"
			repositories.UpdateUser(user)
		}

	default:
		text, buttons = mapsActions.MapsActions(user, data)
		if strings.Contains(user.MenuLocation, "step2.1") {
			text = fmt.Sprintf("%s%s%s", info2, v.GetString("msg_separator"), text)
		} else if strings.Contains(user.MenuLocation, "step2") {
			text = fmt.Sprintf("%s%s%s", info1, v.GetString("msg_separator"), text)
		}
	}

	return text, buttons
}
