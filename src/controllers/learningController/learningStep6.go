package learningController

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	v "github.com/spf13/viper"
	"project0/src/actions/mapsActions"
	"project0/src/controllers/boxController"
	"project0/src/controllers/userMapController"
	"project0/src/models"
	"project0/src/repositories"
	"project0/src/services/helpers"
	"strings"
)

func learningStep6(data string, user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	if len(data) == 0 {
		return
	}

	charData := strings.Fields(data)

	sep := v.GetString("msg_separator")
	info := "–û–π, –Ω–µ –±–æ–π—Å—è, –ø—Ä–∏–∑—Ä–∞–∫–æ–≤ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!\n" +
		"–ü–µ—Ä–µ–¥ —Ç–æ–±–æ–π –ª–µ–∂–∏—Ç üéÅ, –≤–æ–∑—å–º–∏ –µ–≥–æ!"
	infoBox := "–ó–∞–π–¥–∏ –≤ –í–µ—â–∏ üß¶ –∏ –ù–∞–¥–µ–Ω—å ‚úÖ —Ñ–æ–Ω–∞—Ä–∏–∫ üî¶, –∏ —Ç–æ–≥–¥–∞ —Å–º–æ–∂–µ—à—å —Ä–∞–∑–≤–µ—è—Ç—å –Ω–æ—á—å!\n" +
		"_(–ù–µ –∑–∞–±—ã–≤–∞–π —Å–Ω–∏–º–∞—Ç—å —Ñ–æ–Ω–∞—Ä–∏–∫ –¥–Ω–µ–º, —á—Ç–æ–± –Ω–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –µ–≥–æ –∑–∞—Ä—è–¥ üîã –∑—Ä—è!)_"
	goodInfo := "–û—Ç–ª–∏—á–Ω–æ, –Ω–∞–¥–µ–≤–∞–π —Ñ–æ–Ω–∞—Ä–∏–∫ üî¶ !"
	finalInfo := "–ó–∞ –¥–≤–µ—Ä—å—é –ª–µ–∂–∏—Ç –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã–π –º–∏—Ä, –∫–æ—Ç–æ—Ä—ã–π —Ç–µ–±–µ –µ—â–µ —Å—Ç–æ–∏—Ç –∏–∑—É—á–∏—Ç—å!\n\n" +
		"–ù–µ–ø–æ–¥–∞–ª—ë–∫—É –æ—Ç —Ç–≤–æ–µ–≥–æ –º–µ—Å—Ç–∞ –ø–æ—è–≤–ª–µ–Ω–∏—è –µ—Å—Ç—å *–≥–æ—Ä–æ–¥*!\n\n" +
		"_–ù–µ –∑–∞–±—É–¥—å —Å–¥–∞—Ç—å –ö–≤–µ—Å—Ç \U0001FAA7 –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑ –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ!_"

	if user.MenuLocation == "learning step6.1" {
		info = infoBox
	} else if user.MenuLocation == "learning step6.2" {
		info = goodInfo
	} else if user.MenuLocation == "learning step6.3" {
		info = finalInfo
	}

	switch true {
	case strings.Contains(data, "–ú–µ–Ω—é"):
		text, buttons = userMapController.GetMyMap(user)
		text = fmt.Sprintf("%s%s%s%s‚ùóÔ∏è –ü–æ–∫–∞ –µ—â–µ —Ä–∞–Ω–æ —ç—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å ü§´", info, v.GetString("msg_separator"), text, v.GetString("msg_separator"))

	case strings.Contains(data, "move 44316"):
		text, buttons = mapsActions.MapsActions(user, data)
		text = fmt.Sprintf("%s%s%s", finalInfo, sep, text)

		user.MenuLocation = "–ö–∞—Ä—Ç–∞"
		repositories.UpdateUser(user)

	case strings.Contains(data, "box"):
		cell := models.Cell{ID: uint(helpers.ToInt(charData[1]))}.GetCell()
		text, buttons = boxController.UserGetBox(user, cell)
		text = fmt.Sprintf("%s%s%s", infoBox, v.GetString("msg_separator"), text)

		user.MenuLocation = "learning step6.1"
		repositories.UpdateUser(user)

	case strings.Contains(data, "goodsMoving") && user.MenuLocation == "learning step6.1":
		text, buttons = mapsActions.MapsActions(user, data)
		text = fmt.Sprintf("%s%s%s", goodInfo, v.GetString("msg_separator"), text)

		user.MenuLocation = "learning step6.2"
		repositories.UpdateUser(user)

	case strings.Contains(data, "cancel") && user.MenuLocation == "learning step6.2":
		text, buttons = mapsActions.MapsActions(user, data)
		text = fmt.Sprintf("%s%s%s", finalInfo, sep, text)

		user.MenuLocation = "learning step6.3"
		repositories.UpdateUser(user)

	case strings.Contains(data, "dressGood"):
		text, buttons = mapsActions.MapsActions(user, data)

	default:
		text, buttons = mapsActions.MapsActions(user, data)
		text = fmt.Sprintf("%s%s%s", info, sep, text)
	}

	return text, buttons
}
