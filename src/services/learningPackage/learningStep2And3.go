package learningPackage

import (
	"fmt"
	tg "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	v "github.com/spf13/viper"
	"project0/src/actions/mapsActions"
	"project0/src/actions/mapsActions/userGetBoxAction"
	"project0/src/controllers/userMapController"
	"project0/src/models"
	"project0/src/repositories"
	"project0/src/services/helpers"
	"strings"
)

func learningStep2And3(data string, user models.User) (text string, buttons tg.InlineKeyboardMarkup) {
	charData := strings.Fields(data)

	info1 := "*–®–∞–≥ 2:*\n–ó–¥–µ—Å—å —Ç—ã –Ω–∞—É—á–∏—à—å—Å—è –¥–æ–±—ã–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã!\n–ò—Å—Å–ª–µ–¥—É–π –º–µ—Å—Ç–Ω–æ—Å—Ç—å, –Ω–µ –±–æ–π—Å—è –Ω–∞–∂–∏–º–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏ –Ω–µ –∑–∞–±—É–¥—å –≤–∑—è—Ç—å –ø–æ–¥–∞—Ä–æ—á–∫–∏ üéÅ —Å–≤–µ—Ä—Ö—É, —Ç–∞–º —Ç—ã –ø–æ–ª—É—á–∏—à—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!"
	info2 := "–û—Ç–ª–∏—á–Ω–æ!\n–í–æ–∑—å–º–∏ –≤—Ç–æ—Ä–æ–π –ø–æ–¥–∞—Ä–æ–∫ üéÅ, –∏ —è –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ, —á—Ç–æ —Å —ç—Ç–∏–º –¥–µ–ª–∞—Ç—å!"
	infoNextStep := "*–®–∞–≥ 3:*\n–ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –ø–æ–ª—É—á–∏–ª –Ω–æ–≤—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã!\n–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö, –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–í–µ—â–∏ üß¶¬ª"

	switch true {
	case strings.Contains(data, "goodsMoving"),
		strings.Contains(data, "–ú–µ–Ω—é"),
		strings.Contains(data, "category"),
		strings.Contains(data, "move 44208"):
		text, buttons = userMapController.GetMyMap(user)
		if strings.Contains(user.MenuLocation, "step2") {
			text = fmt.Sprintf("%s%s%s%s‚ùóÔ∏è –ü–æ–∫–∞ –µ—â–µ —Ä–∞–Ω–æ —ç—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å ü§´", info1, v.GetString("msg_separator"), text, v.GetString("msg_separator"))
		} else {
			text = fmt.Sprintf("%s%s%s%s‚ùóÔ∏è –ü–æ–∫–∞ –µ—â–µ —Ä–∞–Ω–æ —ç—Ç–æ –Ω–∞–∂–∏–º–∞—Ç—å ü§´", info2, v.GetString("msg_separator"), text, v.GetString("msg_separator"))
		}

	case strings.Contains(data, "box"):
		cell := models.Cell{ID: uint(helpers.ToInt(charData[1]))}.GetCell()
		text, buttons = userGetBoxAction.UserGetBox(user, cell)

		if strings.Contains(user.MenuLocation, "step2") {
			text = fmt.Sprintf("%s%s%s", info2, v.GetString("msg_separator"), text)
			user.MenuLocation = "learning step3"
			repositories.UpdateUser(user)
		} else {
			text = fmt.Sprintf("%s%s%s", infoNextStep, v.GetString("msg_separator"), text)
			user.MenuLocation = "learning step4"
			repositories.UpdateUser(user)
		}

	default:
		text, buttons = mapsActions.MapsActions(user, data)
		if strings.Contains(user.MenuLocation, "step2") {
			text = fmt.Sprintf("%s%s%s", info1, v.GetString("msg_separator"), text)
		} else {
			text = fmt.Sprintf("%s%s%s", info2, v.GetString("msg_separator"), text)
		}
	}

	return text, buttons
}
