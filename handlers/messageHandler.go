package handlers

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"project0/repository"
	"strings"
	"time"
)

var msg tgbotapi.MessageConfig

func messageResolver(update tgbotapi.Update) tgbotapi.MessageConfig {
	resUser := repository.GetOrCreateUser(update)

	switch resUser.MenuLocation {
	case "–ú–µ–Ω—é":
		msg = userMenuLocation(update, resUser)
	case "–ö–∞—Ä—Ç–∞":
		msg = userMapLocation(update, resUser)
	case "–ü—Ä–æ—Ñ–∏–ª—å":
		msg = userProfileLocation(update, resUser)
	default:
		msg = userMenuLocation(update, resUser)
	}

	msg.ParseMode = "markdown"

	return msg
}

func userMenuLocation(update tgbotapi.Update, user repository.User) tgbotapi.MessageConfig {
	buttons := tgbotapi.ReplyKeyboardMarkup{}
	newMessage := update.Message.Text

	switch newMessage {
	case "üó∫ –ö–∞—Ä—Ç–∞ üó∫":
		msg.Text, buttons = repository.GetMyMap(update)
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
		msg.ReplyMarkup = buttons
		repository.UpdateUser(update, repository.User{MenuLocation: "–ö–∞—Ä—Ç–∞"})
	case "üë§ –ü—Ä–æ—Ñ–∏–ª—å üëî":
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "*–ü—Ä–æ—Ñ–∏–ª—å*:\n_–¢–≤–æ–µ –∏–º—è_ *"+user.Username+"*!\n_–ê–≤–∞—Ç–∞—Ä_:"+user.Avatar)
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
		msg.ReplyMarkup = profileKeyboard
		repository.UpdateUser(update, repository.User{MenuLocation: "–ü—Ä–æ—Ñ–∏–ª—å"})
	case "üëú –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å üëú":
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
		msg.ReplyMarkup = backpackKeyboard
		repository.UpdateUser(update, repository.User{MenuLocation: "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å"})
	default:
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é")
		msg.ReplyMarkup = mainKeyboard
		repository.UpdateUser(update, repository.User{MenuLocation: "–ú–µ–Ω—é"})
	}

	return msg
}

func userMapLocation(update tgbotapi.Update, user repository.User) tgbotapi.MessageConfig {
	newMessage := update.Message.Text
	buttons := tgbotapi.ReplyKeyboardMarkup{}
	currentTime := time.Now()
	char := strings.Fields(newMessage)

	if len(char) != 1 {
		msg = changeLocation(update, char[0])
	} else {
		switch newMessage {
		case "üîº":
			moveUp(update)
			msg.Text, buttons = repository.GetMyMap(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
			msg.ReplyMarkup = buttons
		case "‚óÄÔ∏èÔ∏è":
			moveLeft(update)
			msg.Text, buttons = repository.GetMyMap(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
			msg.ReplyMarkup = buttons
		case "‚ñ∂Ô∏è":
			moveRight(update)
			msg.Text, buttons = repository.GetMyMap(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
			msg.ReplyMarkup = buttons
		case "üîΩ":
			moveDown(update)
			msg.Text, buttons = repository.GetMyMap(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
			msg.ReplyMarkup = buttons
		case "\U0001F7E6":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–¢—ã –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ Jesus! üëÆ‚Äç‚ôÇÔ∏è")
		case "üï¶":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, currentTime.Format("\"15:04:05\"")+"\n–ß–∞—Å–∏–∫–∏ —Ç–∏–∫–∞—é—Ç...")
		case user.Avatar:
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, repository.GetUserInfo(update))
		case "/menu", "–ú–µ–Ω—é":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é")
			msg.ReplyMarkup = mainKeyboard
			repository.UpdateUser(update, repository.User{MenuLocation: "–ú–µ–Ω—é"})
		case "üé∞":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "üí∞üíµü§ë –°—Ç–∞–≤–∫–∏ –Ω–∞ JOY CASINO –¥–æ—Ç COM! ü§ëüíµüí∞ ")
		default:
			msg.Text, buttons = repository.GetMyMap(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
			msg.ReplyMarkup = buttons
		}
	}

	return msg
}

func userProfileLocation(update tgbotapi.Update, user repository.User) tgbotapi.MessageConfig {
	newMessage := update.Message.Text

	if user.Username == "waiting" {
		res := repository.UpdateUser(update, repository.User{Username: newMessage})
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "*–ü—Ä–æ—Ñ–∏–ª—å*:\n_–¢–≤–æ–µ –∏–º—è_ *"+res.Username+"*!\n_–ê–≤–∞—Ç–∞—Ä_:"+res.Avatar)
		msg.ReplyMarkup = profileKeyboard
	} else if user.Avatar == "waiting" {
		res := repository.UpdateUser(update, repository.User{Avatar: newMessage})
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "*–ü—Ä–æ—Ñ–∏–ª—å*:\n_–¢–≤–æ–µ –∏–º—è_ *"+res.Username+"*!\n_–ê–≤–∞—Ç–∞—Ä_:"+res.Avatar)
		msg.ReplyMarkup = profileKeyboard
	} else {
		switch newMessage {
		case "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è? üìù":
			repository.UpdateUser(update, repository.User{Username: "waiting"})
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "‚ÄºÔ∏è *–í–ù–ò–ú–ê–ù–ò–ï*: ‚ÄºÔ∏è‚Äº\n–¢—ã –¥–æ–ª–∂–µ–Ω –≤–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è?\n‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è")
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		case "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä? üë§":
			repository.UpdateUser(update, repository.User{Avatar: "waiting"})
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "‚ÄºÔ∏è *–í–ù–ò–ú–ê–ù–ò–ï*: ‚ÄºÔ∏è‚Äº\n–¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å —Å–º–∞–π–ª–∏–∫\n(_–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç_)\n‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è")
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		case "/menu", "–ú–µ–Ω—é":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é")
			msg.ReplyMarkup = mainKeyboard
			repository.UpdateUser(update, repository.User{MenuLocation: "–ú–µ–Ω—é"})
		}
	}
	return msg
}

func changeLocation(update tgbotapi.Update, char string) tgbotapi.MessageConfig {
	buttons := tgbotapi.ReplyKeyboardMarkup{}

	switch char {
	case "üîº":
		moveUp(update)
	case "üîΩ":
		moveDown(update)
	case "‚óÄÔ∏èÔ∏è":
		moveLeft(update)
	case "‚ñ∂Ô∏è":
		moveRight(update)
	}

	msg.Text, buttons = repository.GetMyMap(update)
	msg = tgbotapi.NewMessage(update.Message.Chat.ID, msg.Text)
	msg.ReplyMarkup = buttons

	return msg
}

func moveUp(update tgbotapi.Update) {
	res := repository.GetOrCreateMyLocation(update)
	y := *res.AxisY + 1
	repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: res.AxisX, AxisY: &y})
}

func moveDown(update tgbotapi.Update) {
	res := repository.GetOrCreateMyLocation(update)
	y := *res.AxisY - 1
	repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: res.AxisX, AxisY: &y})
}

func moveLeft(update tgbotapi.Update) {
	res := repository.GetOrCreateMyLocation(update)
	x := *res.AxisX - 1
	repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: &x, AxisY: res.AxisY})
}

func moveRight(update tgbotapi.Update) {
	res := repository.GetOrCreateMyLocation(update)
	x := *res.AxisX + 1
	repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: &x, AxisY: res.AxisY})
}
