package handlers

import (
	tgbotapi "github.com/go-telegram-bot-api/telegram-bot-api/v5"
	"project0/repository"
)

var msg tgbotapi.MessageConfig

func messageResolver(update tgbotapi.Update) tgbotapi.MessageConfig {
	resUser := repository.GetOrCreateUser(update)

	newMessage := update.Message.Text
	var buttons = repository.MapButtons{}

	if resUser.Username == "waiting" {
		res := repository.UpdateUser(update, repository.User{Username: newMessage})
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "*–ü—Ä–æ—Ñ–∏–ª—å*:\n_–¢–≤–æ–µ –∏–º—è_ *"+res.Username+"*!\n_–ê–≤–∞—Ç–∞—Ä_:"+res.Avatar)
		msg.ParseMode = "markdown"
		msg.ReplyMarkup = profileKeyboard
	} else if resUser.Avatar == "waiting" {
		res := repository.UpdateUser(update, repository.User{Avatar: newMessage})
		msg = tgbotapi.NewMessage(update.Message.Chat.ID, "*–ü—Ä–æ—Ñ–∏–ª—å*:\n_–¢–≤–æ–µ –∏–º—è_ *"+res.Username+"*!\n_–ê–≤–∞—Ç–∞—Ä_:"+res.Avatar)
		msg.ParseMode = "markdown"
		msg.ReplyMarkup = profileKeyboard
	} else {
		switch newMessage {
		case "/start":
			res := repository.GetOrCreateUser(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é —Ç–µ–±—è,  "+res.Username)
			msg.ReplyMarkup = mainKeyboard
		case "/menu", "–ú–µ–Ω—é":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ú–µ–Ω—é")
			msg.ReplyMarkup = mainKeyboard
		case "üó∫\n–ö–∞—Ä—Ç–∞":
			msg, buttons = repository.GetMyMap(update)
			msg.ReplyMarkup = createMoveKeyboard(buttons)
		case "üë§üëî\n–ü—Ä–æ—Ñ–∏–ª—å":
			res := repository.GetOrCreateUser(update)
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "*–ü—Ä–æ—Ñ–∏–ª—å*:\n_–¢–≤–æ–µ –∏–º—è_ *"+res.Username+"*!\n_–ê–≤–∞—Ç–∞—Ä_:"+res.Avatar)
			msg.ReplyMarkup = profileKeyboard
		case "üìù –ò–∑–º–µ–Ω–∏—Ç—å –∏–º—è? üìù":
			repository.UpdateUser(update, repository.User{Username: "waiting"})
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "‚ÄºÔ∏è *–í–ù–ò–ú–ê–ù–ò–ï*: ‚ÄºÔ∏è‚Äº\n–¢—ã –¥–æ–ª–∂–µ–Ω –≤–ø–∏—Å–∞—Ç—å –Ω–æ–≤–æ–µ –∏–º—è?\n‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è")
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		case "üë§ –ò–∑–º–µ–Ω–∏—Ç—å –∞–≤–∞—Ç–∞—Ä? üë§":
			repository.UpdateUser(update, repository.User{Avatar: "waiting"})
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "‚ÄºÔ∏è *–í–ù–ò–ú–ê–ù–ò–ï*: ‚ÄºÔ∏è‚Äº\n–¢—ã –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Å–ª–∞—Ç—å —Å–º–∞–π–ª–∏–∫\n(_–≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç_)\n‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è‚ÄºÔ∏è")
			msg.ReplyMarkup = tgbotapi.NewRemoveKeyboard(true)
		case "üëú\n–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å":
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–ò–Ω–≤–µ–Ω—Ç–∞—Ä—å")
			msg.ReplyMarkup = backpackKeyboard
		case "üîº":
			res := repository.GetOrCreateMyLocation(update)
			repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: res.AxisX, AxisY: res.AxisY + 1})
			msg, buttons = repository.GetMyMap(update)
			msg.ReplyMarkup = createMoveKeyboard(buttons)
		case "‚óÄÔ∏è":
			res := repository.GetOrCreateMyLocation(update)
			repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: res.AxisX - 1, AxisY: res.AxisY})
			msg, buttons = repository.GetMyMap(update)
			msg.ReplyMarkup = createMoveKeyboard(buttons)
		case "‚ñ∂Ô∏è":
			res := repository.GetOrCreateMyLocation(update)
			repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: res.AxisX + 1, AxisY: res.AxisY})
			msg, buttons = repository.GetMyMap(update)
			msg.ReplyMarkup = createMoveKeyboard(buttons)
		case "üîΩ":
			res := repository.GetOrCreateMyLocation(update)
			repository.UpdateLocation(update, repository.Location{Map: res.Map, AxisX: res.AxisX, AxisY: res.AxisY - 1})
			msg, buttons = repository.GetMyMap(update)
			msg.ReplyMarkup = createMoveKeyboard(buttons)
		default:
			msg = tgbotapi.NewMessage(update.Message.Chat.ID, "–°–∞–º —Ç—ã "+newMessage)
		}
	}
	msg.ParseMode = "markdown"

	return msg
}
